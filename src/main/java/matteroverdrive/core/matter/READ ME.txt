How the matter data file works:

1. Individual items are represented by "item" : <number>. For example, say we wanted
to assign a value of 10 kM to cobblestone. The entry would look like this:

    "minecraft:cobblestone" : 10
    
2. Item tags are represented by "#tag" : <number>. For example, say we wanted to assign
a value of 5 kM to all types of dirt. The entry would look like this"

    "#minecraft:dirt" : 5

3. Duplicates will be ignored. Say we have the following:

    "#minecraft:dirt" : 10,
    "#minecraft:dirt" : 5

Since the key assigning 10 to the dirt tag is before the key assigning 5, the key assigning
5 will be ignored, and all items in the dirt tag will have a value of 10 kM.

4. Items will be populated before tags when the JSON file is read. This is because tags
are not populated until the server loads, where as items are already registered by that 
point. This means you can override specific item values in a tag. For example, say we
have the following:

    "#minecraft:dirt" : 10,
    "minecraft:dirt" : 5
    
Because "minecraft:dirt" is an item, it will have its value loaded instantly, where as the
tag "#minecraft:dirt" will not be loaded until the server is loaded. The result of this would
be that the Item "Dirt" would have a value of 5 kM, where as Podzol and Grass would have values
of 10 kM.



Adding your own matter values:

1. To add your own matter values, create a file called "values.json" under the package "matter" in
a data pack. This package can either be an external data pack or in your mod's built-in one. All
item and tag values in this file will be processed regularly. However, this does not guarantee that
your item values will be assigned if another mod already assigns a tag and its file is loaded first.

2. To assign values to items in your mod, you don't have to do a whole lot of work, as there is a
provided command to generate values for you. Instead of coding every single value by hand, you 
simply have to code values that don't have a recipe and then run the command in-game:

    /matteroverdrive genmattervalues

By default, the generator ships with support for Crafting Table, Furnace, and Smithing Table
recipes. Upon running the command, the generator will produce a JSON file and save it under 

    Matter Overdrive/generated.json

in your save folder. Note, this file will be overwritten each time the command is run!

You can then either put this file in your mod's "matter" folder along with your "values.json" file to 
ship it directly with your mod, or make a datapack from it!

Now, you might be disappointed, as the generator can only handle Vanilla Recipes. Wrong! The generator
can handle any recipe type as long as you provide a consumer for it. To add your own recipe handling, 
to the generator, first add Matter Overdrive as a dependency to your mod. Next, in a place of your choosing, 
call the method 

    MatterRegister.addGeneratorConsumer(BiConsumer)

The method takes a BiConsumer with the two input arguments being:

A) A HashMap of the values created by the generator when you run the command
B) The RecipeManager for the world you are in when you run the command

Simply provide a BiConsumer of how to handle a particular recipe type and add the resulting value to the 
input HashMap. See DefaultGeneratorConsumers under main/java/matteroverdrive/core/matter/DefaultGeneratorConsumers 
for examples of how this implementation would look. Then simply ensure the consumer is added by the time
the command is run.

3. To help you with manually assigning matter values to items, the command 

    /matteroverdrive addmattervalue <value>

has been added. To use, simply hold an item in your main hand and run the command. The item will then
be added to the file 

    Matter Overdrive/manual.json

Unlike the genmattervalues command, the file will not be overwritten each time it is run. However, if 
the item is already present in the existing file, then it will be overwritten by the new assignment. 
As an example, say you wanted to assign a value of 10 kM to Dirt. Holding the Dirt block in your main 
hand, the command would look like this:

    /matteroverdrive addmattervalue 10

Note, the command supports the double primitive type!

4. If you want to completely customize matter values, then it is within your power. Simply create a data
pack with a higher priority than 8, and it will override all the preset values shipped with Matter Overdrive
and other mods. However, due to the limitations of data packs, the only difference in priority is
the higher priority packs get parsed before the lower ones. In short, this means if you want to 
remove the matter value from an item added from a lower data pack, you will need to tell the parser
not to. This can be easily, albeit tediously, accomplished by assigning a value of 0 or less to the 
item in your json file. For example, say you really hate dirt, and don't want it to have a matter value.
In your custom json file, you would add the line:

    "minecraft:dirt" : 0

Any integer less than or equal to zero will technically work! Remember the tag rules from above also
would still apply here.












